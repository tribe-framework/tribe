services:
  # MySQL 9 Database - System-wide
  mysql:
    image: mysql:9
    container_name: tribe_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - tribe_network

  # config/setup.sh
  setup:
    image: alpine:3
    container_name: ${PROJECT_NAME}_setup
    volumes:
      - ./config:/config
      - ./applications:/applications
      - ./uploads:/uploads
      - .:/workdir
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket
    working_dir: /workdir
    command: sh -c "apk add --no-cache curl unzip bash docker-cli && bash ./config/setup.sh && touch /tmp/setup_complete && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/setup_complete"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 30s
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - tribe_network

  # PHP 8 with FPM for Tribe
  php_tribe:
    image: tribeframework/tribe-core:v1.0
    platform: linux/amd64
    container_name: ${PROJECT_NAME}_php_tribe
    restart: unless-stopped
    volumes:
      - ./applications/tribe:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
      - ./README.html:/var/www/html/index.php
    command: >
      sh -c "composer install --no-interaction --optimize-autoloader &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # PHP 8 with FPM for Junction
  php_junction:
    image: tribeframework/tribe-core:v1.0
    platform: linux/amd64
    container_name: ${PROJECT_NAME}_php_junction
    restart: unless-stopped
    volumes:
      - ./applications/junction/dist:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
    command: >
      sh -c "composer install --no-interaction --optimize-autoloader &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # PHP 8 with FPM for Dist PHP
  php_dist:
    image: tribeframework/tribe-core:v1.0
    platform: linux/amd64
    container_name: ${PROJECT_NAME}_php_dist
    restart: unless-stopped
    volumes:
      - ./uploads/sites/dist-php:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./logs:/var/log
    command: >
      sh -c "if [ -f composer.json ]; then composer install --no-interaction --optimize-autoloader; fi &&
           php-fpm"
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # Caddy Web Server (Tribe) with SSL
  caddy_tribe:
    image: caddy:2-alpine
    container_name: ${PROJECT_NAME}_caddy_tribe
    restart: unless-stopped
    ports:
      - "${TRIBE_PORT:-12000}:80"
      - "${TRIBE_PORT_SSL:-12001}:443"
    volumes:
      - ./applications/tribe:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./README.html:/var/www/html/index.php
      - ./config/tribe/Caddyfile:/etc/caddy/Caddyfile
      - ./logs:/var/log/caddy
      - tribe_caddy_data:/data
      - tribe_caddy_config:/config
    environment:
      - TRIBE_BARE_URL=${TRIBE_BARE_URL}
    depends_on:
      setup:
        condition: service_healthy
      php_tribe:
        condition: service_started
    networks:
      - tribe_network

  # Caddy Web Server (Junction) with SSL
  caddy_junction:
    image: caddy:2-alpine
    container_name: ${PROJECT_NAME}_caddy_junction
    restart: unless-stopped
    ports:
      - "${JUNCTION_PORT:-12002}:80"
      - "${JUNCTION_PORT_SSL:-12003}:443"
    volumes:
      - ./applications/junction/dist:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./config/junction/Caddyfile:/etc/caddy/Caddyfile
      - ./logs:/var/log/caddy
      - junction_caddy_data:/data
      - junction_caddy_config:/config
    environment:
      - JUNCTION_BARE_URL=${JUNCTION_BARE_URL}
    depends_on:
      setup:
        condition: service_healthy
      php_junction:
        condition: service_started
    networks:
      - tribe_network

  # Caddy Web Server (Dist PHP) with SSL
  caddy_php_dist:
    image: caddy:2-alpine
    container_name: ${PROJECT_NAME}_caddy_php_dist
    restart: unless-stopped
    ports:
      - "${DIST_PHP_PORT:-12010}:80"
      - "${DIST_PHP_PORT_SSL:-12011}:443"
    volumes:
      - ./uploads/sites/dist-php:/var/www/html
      - ./uploads:/var/www/html/uploads
      - ./.env:/var/www/html/.env
      - ./config/dist-php/Caddyfile:/etc/caddy/Caddyfile
      - ./logs:/var/log/caddy
      - dist_php_caddy_data:/data
      - dist_php_caddy_config:/config
    environment:
      - DIST_PHP_BARE_URL=${DIST_PHP_BARE_URL}
    depends_on:
      setup:
        condition: service_healthy
      php_dist:
        condition: service_started
    networks:
      - tribe_network

  # FileBrowser for file management
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: ${PROJECT_NAME}_filebrowser
    restart: unless-stopped
    ports:
      - "${FILEBROWSER_PORT:-12006}:80"
      - "${FILEBROWSER_PORT_SSL:-12007}:443"
    volumes:
      - ./uploads:/srv
      - filebrowser_data:/database
    environment:
      - FB_DATABASE=/database/filebrowser.db
      - FB_ROOT=/srv
      - FB_PORT=80
      - FB_ADDRESS=0.0.0.0
    command: >
      sh -c "
        if [ ! -f /database/filebrowser.db ]; then
          filebrowser config init --database /database/filebrowser.db --root /srv &&
          filebrowser users add admin ${FILEBROWSER_PASSWORD} --perm.admin;
        fi &&
        filebrowser
      "
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # Typesense Search Engine
  typesense:
    image: typesense/typesense:29.0
    container_name: ${PROJECT_NAME}_typesense
    restart: unless-stopped
    ports:
      - "${TYPESENSE_PORT:-12004}:8108"
    volumes:
      - ./uploads/typesense:/data
    environment:
      - TYPESENSE_DATA_DIR=/data
      - TYPESENSE_API_KEY=${TYPESENSE_API_KEY:-xyz}
      - TYPESENSE_ENABLE_CORS=true
    command: >
      sh -c "
        mkdir -p /data &&
        /opt/typesense-server --data-dir /data --api-key \$TYPESENSE_API_KEY --enable-cors
      "
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    platform: linux/amd64
    container_name: ${PROJECT_NAME}_phpmyadmin
    restart: unless-stopped
    ports:
      - "${PHPMYADMIN_PORT:-12008}:80"
      - "${PHPMYADMIN_PORT_SSL:-12009}:443"
    environment:
      PMA_HOST: ${DB_HOST}
      PMA_PORT: 3306
      UPLOAD_LIMIT: 2G
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # Caddy Static Site Server - Single site from uploads/sites/dist
  caddy_dist:
    image: caddy:2-alpine
    container_name: ${PROJECT_NAME}_caddy_dist
    restart: unless-stopped
    ports:
      - "${DIST_PORT:-12012}:80"
      - "${DIST_PORT_SSL:-12013}:443"
    volumes:
      - ./uploads/sites/dist:/srv
      - ./config/dist/Caddyfile:/etc/caddy/Caddyfile
      - ./logs:/var/log/caddy
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

  # MySQL Backup Service
  mysql_backup:
    image: mysql:9
    container_name: ${PROJECT_NAME}_mysql_backup
    restart: "no"
    volumes:
      - ./uploads/backups:/backups
    environment:
      - MYSQL_PWD=${MYSQL_ROOT_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - PROJECT_NAME=${PROJECT_NAME}
    command: >
      sh -c "
        # Function to create backup
        create_backup() {
          echo 'Creating MySQL backup...'
          BACKUP_DATE=\$$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE=\"/backups/${PROJECT_NAME}_backup_\$$BACKUP_DATE.sql.gz\"
          
          # Create the backup
          mysqldump -h \$$DB_HOST -P \$$DB_PORT -u root --single-transaction --routines --triggers \$$DB_NAME | gzip > \$$BACKUP_FILE
          
          if [ \$$? -eq 0 ]; then
            echo \"Backup created successfully: \$$BACKUP_FILE\"
            
            # Keep only last 7 backups
            echo 'Cleaning up old backups (keeping last 7)...'
            cd /backups
            ls -t ${PROJECT_NAME}_backup_*.sql.gz | tail -n +8 | xargs -r rm -f
            echo 'Backup cleanup completed'
          else
            echo 'Backup failed!'
            exit 1
          fi
        }
        
        # Function to handle shutdown signal
        cleanup() {
          echo 'Received shutdown signal, creating final backup...'
          create_backup
          echo 'Backup service shutting down'
          exit 0
        }
        
        # Set up signal handler
        trap cleanup SIGTERM SIGINT
        
        # Create initial backup
        create_backup
        
        # Keep the container running and wait for signals
        echo 'Backup service started. Waiting for shutdown signal...'
        while true; do
          sleep 30
        done
      "
    depends_on:
      setup:
        condition: service_healthy
    networks:
      - tribe_network

# Tribe Network
networks:
  tribe_network:
    driver: bridge
    name: tribe_network
    #external: true

volumes:
  junction_caddy_data:
  junction_caddy_config:
  tribe_caddy_data:
  tribe_caddy_config:
  dist_php_caddy_data:
  dist_php_caddy_config:
  filebrowser_data:
  mysql_data:
    driver: local
